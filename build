#!/bin/sh

#Valid flags
flags=(
    '-t|--target_arch'
    '-h|--help')

#Realpath to Current Working Directory
CWD=$(dirname $(realpath $0));

#Paths
ELECTRON_PATH="$CWD/electron";
BRIGHTRAY_PATH="$ELECTRON_PATH/vendor/brightray";
LIBCHROMIUM_PATH="$BRIGHTRAY_PATH/vendor/libchromiumcontent";

#Libchromiumcontent
libchromiumcontent_bootstrap() {
    #TODO update install-sysroot.py to use jessie
    cd $CWD
    patch -N $LIBCHROMIUM_PATH/script/update \
        < patches/libchromiumcontent-update.patch

    #Sync libchromiumcontent submodules
    cd $LIBCHROMIUM_PATH;
    python script/bootstrap;

    #Use_gtk3 to defines via sed
    sed -e "s|'use_gtk3': 1, ||" \
        -e "s|'use_dbus': 1,|'use_dbus': 1, 'use_gtk3': 1, |" \
        -i chromiumcontent/chromiumcontent.gypi

    #Download src
    python script/update -t $arch;

    #No use_sysroot in common.gypi via sed
    sed -e "s|'use_sysroot%': 1,|'use_sysroot%': 0,|" \
        -i vendor/chromium/src/build/common.gypi

    #Update gyp
    python script/update -t $arch -s;
}
libchromiumcontent_build() {
    #TODO: integrate pkg-config in a more friendly way
    sys_pkgs="gtk+-3.0 wayland-protocols gl egl glib-2.0 x11 gdk-3.0
            gmodule-2.0 gthread-2.0 gtk+-unix-print-3.0
            libpulse atk"

    pkg-config --cflags $sys_pkgs --libs $sys_pkgs
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig;

    #Build
    cd $LIBCHROMIUM_PATH;
    python script/build -t $arch;
}
libchromiumcontent_dist() {
    cd $LIBCHROMIUM_PATH;
    python script/create-dist -t $arch;
}

#Electron
electron_bootstrap() {
    cd $ELECTRON_PATH;
    echo 'Electron Bootstrap';
}
electron_build() {
    cd $ELECTRON_PATH;
    echo 'Electron Build';
}
electron_dist() {
    cd $ELECTRON_PATH;
    echo 'Electron CreateDist';
}

#Clean
clean() {
    rm -rf $ELECTRON_PATH;
    rm -rf .tmp;
}

#Main
main() {
    #Available FNs
    funcs=$(typeset -f | awk '/ \(\) $/ && !/^(main) / {print $1}');

    #Update submodules if this is the first time running the script
    mkdir -p $ELECTRON_PATH;
    if [[ $(find ./electron/ -maxdepth 1 -type d | wc -l) == 1 ]]; then
        git submodule update --init --recursive
    fi

    #Load ./utils/*.sh helpers
    for f in $(find ${CWD}/utils -name '*.sh'); do
        . $f
    done

    #Parse Command Line Args
    if [[ $@ ]]; then
        eval $(argsToArray $@);
    fi

    #Get system architecture
    arch=$(archParser $(getArg --target_arch))

    #Help Menu || Show if arch is un-detectable
    if [[ $@ =~ -h|--help || ! $arch ]]; then
        if [[ ! $arch ]]; then
            echo "Unable to detect architecture type.";
            echo "----";
        fi

        helpMenu $funcs;
        return;
    fi

    #Make sure we use Python 2 - ugh
    if [[ ! $(python --version) =~ 2 ]]; then
        PYENV_PATH="$CWD/.tmp"
        mkdir -p $PYENV_PATH

        # TODO: figure out a bulletproof way to find python 2
        ln -sf /usr/bin/python2 "$PYENV_PATH/python"

        OG_PATH=($(echo $PATH|sed "s|${PYENV_PATH}:||g"))
        export PATH=$PYENV_PATH:$OG_PATH
    fi

    #Is Command Function
    if [[ $1 && $funcs =~ $1 ]]; then
        $1
    #No Command, execute all
    else
        #Bootstrap, patch and build Libchromiumcontent
        libchromiumcontent_bootstrap;
        libchromiumcontent_build;
        libchromiumcontent_dist;

        #Bootstrap, patch and build Electron
        electron_bootstrap;
        electron_build;
        electron_dist;
    fi

    #Reset Python Path
    if [[ $PYENV_PATH ]]; then
        export PATH=$OG_PATH
    fi
}

main $@
